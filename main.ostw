import "settings.lobby";

import "OSTWUtils/OnScreenText.del";
import "OSTWUtils/Math.del";

globalvar HeroAbility[] ability1Heroes = import("heroAbilityData.json").ability1Heroes;
globalvar HeroAbility[] ability2Heroes = import("heroAbilityData.json").ability2Heroes;
globalvar HeroAbility[] ultimateHeroes = import("heroAbilityData.json").ultimateHeroes;
globalvar String[] modifiers = import("heroAbilityData.json").modifiers;

globalvar Vector cameraPos = Up() * 3;
globalvar Vector cameraFacing = Normalize(Forward() + 0.085 * Down());
globalvar Vector cameraXAxis;
globalvar Vector cameraYAxis;

globalvar Number[] wheelTexts = [];

globalvar Number i 120;

struct HeroAbility {
  public Hero hero;
  public String abilityName;
}

enum WheelType {
  Hero,
  Ability1,
  Ability2,
  Ultimate,
  Modifier
}

import "wheelSimulation.del";

String WheelTypeName(Number wheelType): ["", "Hero", "Ability 1", "Ability 2", "Ultimate", "Modifier"][<Number>wheelType + 1];
Number WheelTypeCountOf(Number wheelType): [0, CountOf(AllHeroes()), ability1Heroes.Length, ability2Heroes.Length, ultimateHeroes.Length, modifiers.Length][wheelType + 1];

globalvar WheelType currentWheel = WheelType.Hero;
Player[] visibleToPlayersOnly(Boolean visibilityCondition = true): AllPlayers().Contains(LocalPlayer()) && visibilityCondition ? AllPlayers() : null;
Boolean CanSwitchWheels(): [WheelState.SLOW_SPIN, WheelState.STOPPED].Contains(wheelState);

rule: "global setup"
{
  # Set some camera constants
  cameraXAxis = Math.WorldVectorForPositionWithPitch(Right(), cameraPos, cameraFacing, false);
  cameraYAxis = Math.WorldVectorForPositionWithPitch(Up(), cameraPos, cameraFacing, false);

  WaitUntil(IsGameInProgress(), 10);
  PauseMatchTime();
  LoadNewWheel();

  # DEBUG
  // CreateHudText(
  //   AllPlayers(),
  //   Text: $"State: {wheelState}                                                                              ",
  //   Location: Location.Left,
  //   Reevaluation: HudTextRev.VisibleToAndString,
  //   SortOrder: 0
  // );
  // CreateHudText(
  //   AllPlayers(),
  //   Text: $"Index: {currentIndex}                                                                              ",
  //   Location: Location.Left,
  //   Reevaluation: HudTextRev.VisibleToAndString,
  //   SortOrder: 1
  // );
  // CreateHudText(
  //   AllPlayers(),
  //   Text: $"Speed: {currentAngularSpeed}                                                                              ",
  //   Location: Location.Left,
  //   Reevaluation: HudTextRev.VisibleToAndString,
  //   SortOrder: 2
  // );
  // CreateHudText(
  //   AllPlayers(),
  //   Text: $"Balance: {outstandingAngularBalance}                                                                              ",
  //   Location: Location.Left,
  //   Reevaluation: HudTextRev.VisibleToAndString,
  //   SortOrder: 3
  // );
  // CreateHudText(
  //   AllPlayers(),
  //   Text: $"Friction: {frictionEnabled ? 'True' : 'False'}                                                                              ",
  //   Location: Location.Left,
  //   Reevaluation: HudTextRev.VisibleToAndString,
  //   SortOrder: 4
  // );
  // CreateHudText(
  //   AllPlayers(),
  //   Text: $"Slow Pan: {slowPanFlag ? 'True' : 'False'}                                                                              ",
  //   Location: Location.Left,
  //   Reevaluation: HudTextRev.VisibleToAndString,
  //   SortOrder: 5
  // );

  # Camera backdrop
  CreateEffect(AllPlayers(), Effect.Orb, Color.Black, cameraPos + -0.33 * cameraFacing, 1, EffectRev.VisibleToPositionAndRadius);

  # Instructions
  CreateInWorldText(
    HostPlayer(),
    <"<0> Spin   |   Stop <1>", InputBindingString(Button.PrimaryFire), InputBindingString(Button.SecondaryFire)>,
    Math.WorldVectorForPositionWithPitch(Vector(100 * 0, 100 * (-0.8 - 0.2), 300), cameraPos, cameraFacing, true),
    Scale: 2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White,
    Spectators.VisibleNever
  );

  # Wheel title
  CreateInWorldText(
    visibleToPlayersOnly(),
    WheelTypeName(<Number>currentWheel),
    Math.WorldVectorForPositionWithPitch(Vector(100 * 0, 100 * (1.5 - 0.2), 300), cameraPos, cameraFacing, true),
    Scale: 4,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.Yellow,
    Spectators.VisibleNever
  );

  # Previous wheel
  CreateInWorldText(
    visibleToPlayersOnly(currentWheel > WheelType.Hero && CanSwitchWheels()),
    IconString(Icon.ArrowLeft),
    Math.WorldVectorForPositionWithPitch(Vector(-3 * 100, 100 * (0.1 - 0.2), 300), cameraPos, cameraFacing, true),
    Scale: 4,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White,
    Spectators.VisibleNever
  );
  CreateInWorldText(
    visibleToPlayersOnly(currentWheel > WheelType.Hero && CanSwitchWheels()),
    WheelTypeName(<Number>currentWheel - 1),
    Math.WorldVectorForPositionWithPitch(Vector(-3 * 100, 100 * (-0.1 - 0.2), 300), cameraPos, cameraFacing, true),
    Scale: 2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White,
    Spectators.VisibleNever
  );
  # Next wheel
  CreateInWorldText(
    visibleToPlayersOnly(currentWheel != WheelType.Modifier && CanSwitchWheels()),
    IconString(Icon.ArrowRight),
    Math.WorldVectorForPositionWithPitch(Vector(3 * 100, 100 * (0.1 - 0.2), 300), cameraPos, cameraFacing, true),
    Scale: 4,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White,
    Spectators.VisibleNever
  );
  CreateInWorldText(
    visibleToPlayersOnly(currentWheel != WheelType.Modifier && CanSwitchWheels()),
    WheelTypeName(<Number>currentWheel + 1),
    Math.WorldVectorForPositionWithPitch(Vector(3 * 100, 100 * (-0.1 - 0.2), 300), cameraPos, cameraFacing, true),
    Scale: 2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White,
    Spectators.VisibleNever
  );
}

rule: "player setup"
Event.OngoingPlayer
if (IsGameInProgress())
{
  while (!HasSpawned()) {
    ForcePlayerHero(EventPlayer(), Hero.Echo);
    Wait(0.25);
  }
  StopForcingHero(EventPlayer());
  DisableScoreboard(EventPlayer());
  StartFacing(EventPlayer(), Forward(), 1000, Relative.ToWorld, FacingRev.None);
  StartForcingPlayerPosition(EventPlayer(), Up() * 100, false);
  SetInvisible(EventPlayer(), InvisibleTo.All);
  SetAbility1Enabled(EventPlayer(), false);
  SetAbility2Enabled(EventPlayer(), false);
  SetUltimateAbilityEnabled(EventPlayer(), false);
  SetPrimaryFireEnabled(EventPlayer(), false);
  SetSecondaryFireEnabled(EventPlayer(), false);
  DisallowButton(EventPlayer(), Button.Jump);
  DisallowButton(EventPlayer(), Button.Crouch);

  StartCamera(EventPlayer(), cameraPos, cameraPos + cameraFacing, 0);
  DisableGameModeHud(EventPlayer());
  DisableHeroHud(EventPlayer());
}

rule: "When primary fire pressed, start spinning the wheel"
Event.OngoingGlobal
if (HostPlayer().IsButtonHeld(Button.PrimaryFire))
{
  wheelEvent = WheelEvent.START_SPIN;
  DispatchWheelEvent();
}

rule: "When secondary fire pressed, immediately stop the wheel"
Event.OngoingGlobal
if (HostPlayer().IsButtonHeld(Button.SecondaryFire))
{
  wheelEvent = WheelEvent.MANUAL_STOP_SPIN;
  DispatchWheelEvent();
}

rule: "When throttle left, select previous wheel"
Event.OngoingGlobal
if (currentWheel > WheelType.Hero)
if (XOf(ThrottleOf(HostPlayer())) > 0.5)
{
  AbortIf(!CanSwitchWheels());
  currentWheel--;
  async LoadNewWheel();
}

rule: "When throttle right, select next wheel"
Event.OngoingGlobal
if (currentWheel < WheelType.Modifier)
if (XOf(ThrottleOf(HostPlayer())) < -0.5)
{
  AbortIf(!CanSwitchWheels());
  currentWheel++;
  async LoadNewWheel();
}

void LoadNewWheel() "Load new wheel visuals"
{
  StopChasingVariable(currentAngularSpeed);
  foreach (Number textId in wheelTexts) {
    DestroyInWorldText(textId);
  }
  wheelTexts = [];

  wheelEvent = WheelEvent.SWITCH_WHEEL;
  DispatchWheelEvent();

  if (currentWheel == WheelType.Hero) {
    CreateHeroWheel();
  }

  if (currentWheel == WheelType.Ability1) {
    // currentIndex = RandomInteger(0, ability1Heroes.Length - 1);
    CreateAbility1Wheel();
  }

  if (currentWheel == WheelType.Ability2) {
    // currentIndex = RandomInteger(0, ability2Heroes.Length - 1);
    CreateAbility2Wheel();
  }

  if (currentWheel == WheelType.Ultimate) {
    CreateUltimateWheel();
  }

  if (currentWheel == WheelType.Modifier) {
    CreateModifierWheel();
  }
}

Number SPIN_OFFSET_SCALAR: 1.2;
Number WHEEL_DISPLAY_DISTANCE: 8;
Number SELECTION_SCALE: 4;
Number FILLER_SCALE: 3.5;
Number FILLERS_EACH_SIDE: 4;
Number FADE_LENGTH: 2;
Number clampedIndex(Number index, Number base): ((index % base) + base) % base;

void CreateHeroWheel() "Create the Hero wheel" {
  # arrow
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    IconString(Icon.ArrowUp),
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.1, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));
  # hero name
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    AllHeroes()[currentIndex],
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.35, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));

  # Main selection icon
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    <"<0>\n", HeroIconString(AllHeroes()[currentIndex])>,
    UpdateEveryFrame(cameraPos
      + WHEEL_DISPLAY_DISTANCE * cameraFacing
      + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - 0.5)),
    SELECTION_SCALE,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString
  ));

  # left side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n", HeroIconString(AllHeroes()[clampedIndex(currentIndex - EvaluateOnce(i + 1), AllHeroes().Length)])>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance + (EvaluateOnce(i) + 0.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - EvaluateOnce(i) - outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }

  # right side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n", HeroIconString(AllHeroes()[clampedIndex(currentIndex + EvaluateOnce(i + 1), AllHeroes().Length)])>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - EvaluateOnce(i + 1.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - 1 - EvaluateOnce(i) + outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }
}

void CreateAbility1Wheel() "Create Ability 1 wheel" {
  # arrow
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    IconString(Icon.ArrowUp),
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.45, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));
  # ability name
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    ability1Heroes[currentIndex].abilityName,
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.7, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));

  # main selection icon
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    <"<0>\n\n<1>", HeroIconString(ability1Heroes[currentIndex].hero), AbilityIconString(ability1Heroes[currentIndex].hero, Button.Ability1)>,
    UpdateEveryFrame(cameraPos
      + WHEEL_DISPLAY_DISTANCE * cameraFacing
      + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - 0.5)),
    SELECTION_SCALE,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString
  ));

  # left side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n\n<1>",
        HeroIconString(ability1Heroes[clampedIndex(currentIndex - EvaluateOnce(i + 1), ability1Heroes.Length)].hero),
        AbilityIconString(ability1Heroes[clampedIndex(currentIndex - EvaluateOnce(i + 1), ability1Heroes.Length)].hero, Button.Ability1)>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance + (EvaluateOnce(i) + 0.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - EvaluateOnce(i) - outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }

  # right side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n\n<1>",
        HeroIconString(ability1Heroes[clampedIndex(currentIndex + EvaluateOnce(i + 1), ability1Heroes.Length)].hero),
        AbilityIconString(ability1Heroes[clampedIndex(currentIndex + EvaluateOnce(i + 1), ability1Heroes.Length)].hero, Button.Ability1)>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - EvaluateOnce(i + 1.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - 1 - EvaluateOnce(i) + outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }
}

void CreateAbility2Wheel() "Create Ability 2 wheel" {
  # arrow
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    IconString(Icon.ArrowUp),
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.45, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));
  # ability name
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    ability2Heroes[currentIndex].abilityName,
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.7, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));

  # main selection icon
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    <"<0>\n\n<1>", HeroIconString(ability2Heroes[currentIndex].hero), AbilityIconString(ability2Heroes[currentIndex].hero, Button.Ability2)>,
    UpdateEveryFrame(cameraPos
      + WHEEL_DISPLAY_DISTANCE * cameraFacing
      + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - 0.5)),
    SELECTION_SCALE,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString
  ));

  # left side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n\n<1>",
        HeroIconString(ability2Heroes[clampedIndex(currentIndex - EvaluateOnce(i + 1), ability2Heroes.Length)].hero),
        AbilityIconString(ability2Heroes[clampedIndex(currentIndex - EvaluateOnce(i + 1), ability2Heroes.Length)].hero, Button.Ability2)>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance + (EvaluateOnce(i) + 0.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - EvaluateOnce(i) - outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }

  # right side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n\n<1>",
        HeroIconString(ability2Heroes[clampedIndex(currentIndex + EvaluateOnce(i + 1), ability2Heroes.Length)].hero),
        AbilityIconString(ability2Heroes[clampedIndex(currentIndex + EvaluateOnce(i + 1), ability2Heroes.Length)].hero, Button.Ability2)>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - EvaluateOnce(i + 1.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - 1 - EvaluateOnce(i) + outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }
}

void CreateUltimateWheel() "Create Ultimate wheel" {
  # arrow
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    IconString(Icon.ArrowUp),
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.45, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));
  # ability name
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    ultimateHeroes[currentIndex].abilityName,
    UpdateEveryFrame(Math.WorldVectorForPositionWithPitch(Vector(0, WHEEL_DISPLAY_DISTANCE/3 * -0.7, WHEEL_DISPLAY_DISTANCE), cameraPos, cameraFacing, true)),
    2.5,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.White
  ));

  # main selection icon
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    <"<0>\n\n<1>", HeroIconString(ultimateHeroes[currentIndex].hero), AbilityIconString(ultimateHeroes[currentIndex].hero, Button.Ultimate)>,
    UpdateEveryFrame(cameraPos
      + WHEEL_DISPLAY_DISTANCE * cameraFacing
      + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - 0.5)),
    SELECTION_SCALE,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString
  ));

  # left side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n\n<1>",
        HeroIconString(ultimateHeroes[clampedIndex(currentIndex - EvaluateOnce(i + 1), ultimateHeroes.Length)].hero),
        AbilityIconString(ultimateHeroes[clampedIndex(currentIndex - EvaluateOnce(i + 1), ultimateHeroes.Length)].hero, Button.Ultimate)>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance + (EvaluateOnce(i) + 0.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - EvaluateOnce(i) - outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }

  # right side
  for (i = 0; FILLERS_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      <"<0>\n\n<1>",
        HeroIconString(ultimateHeroes[clampedIndex(currentIndex + EvaluateOnce(i + 1), ultimateHeroes.Length)].hero),
        AbilityIconString(ultimateHeroes[clampedIndex(currentIndex + EvaluateOnce(i + 1), ultimateHeroes.Length)].hero, Button.Ultimate)>,
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraXAxis * SPIN_OFFSET_SCALAR * (outstandingAngularBalance - EvaluateOnce(i + 1.5))
      ),
      FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= FILLERS_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (FILLERS_EACH_SIDE - FADE_LENGTH - 1 - EvaluateOnce(i) + outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }
}

Number VERTICAL_WHEEL_SPACING: 0.5;
Number VERTICAL_WHEEL_EACH_SIDE: 3;
Number VERTICAL_SELECTION_SCALE: 2.5;
Number VERTICAL_FILLER_SCALE: 2.25;
Number VERTICAL_WHEEL_Y_OFFSET: 0.45;

void CreateModifierWheel() "Create Modifier wheel" {
  # main selection
  wheelTexts.ModAppend(CreateInWorldText(
    AllPlayers(),
    modifiers[currentIndex],
    UpdateEveryFrame(cameraPos
      + WHEEL_DISPLAY_DISTANCE * cameraFacing
      + cameraYAxis * VERTICAL_WHEEL_Y_OFFSET
      + cameraYAxis * -VERTICAL_WHEEL_SPACING * (outstandingAngularBalance - 0.5)),
    VERTICAL_SELECTION_SCALE,
    Clipping.DoNotClip,
    InworldTextRev.VisibleToPositionAndString,
    Color.Yellow
  ));

  # down
  for (i = 0; VERTICAL_WHEEL_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      modifiers[clampedIndex(currentIndex - EvaluateOnce(i + 1), modifiers.Length)],
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraYAxis * VERTICAL_WHEEL_Y_OFFSET
        + cameraYAxis * -VERTICAL_WHEEL_SPACING * (outstandingAngularBalance + (EvaluateOnce(i) + 0.5))
      ),
      VERTICAL_FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= VERTICAL_WHEEL_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (VERTICAL_WHEEL_EACH_SIDE - FADE_LENGTH - EvaluateOnce(i) - outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }

  # up
  for (i = 0; VERTICAL_WHEEL_EACH_SIDE; 1) {
    wheelTexts.ModAppend(CreateInWorldText(
      AllPlayers(),
      modifiers[clampedIndex(currentIndex + EvaluateOnce(i + 1), modifiers.Length)],
      UpdateEveryFrame(cameraPos
        + WHEEL_DISPLAY_DISTANCE * cameraFacing
        + cameraYAxis * VERTICAL_WHEEL_Y_OFFSET
        + cameraYAxis * -VERTICAL_WHEEL_SPACING * (outstandingAngularBalance - EvaluateOnce(i + 1.5))
      ),
      VERTICAL_FILLER_SCALE,
      Clipping.DoNotClip,
      InworldTextRev.VisibleToPositionStringAndColor,
      i >= VERTICAL_WHEEL_EACH_SIDE - FADE_LENGTH
        ? CustomColor(255,255,255,255 + (VERTICAL_WHEEL_EACH_SIDE - FADE_LENGTH - 1 - EvaluateOnce(i) + outstandingAngularBalance) * 255/FADE_LENGTH)
        : Color.White
    ));
  }
}

disabled rule: "[DEBUG] slow mo"
Event.OngoingPlayer
if (EventPlayer().IsButtonHeld(Button.Interact))
{
  SetSlowMotion(25);
  WaitUntil(!EventPlayer().IsButtonHeld(Button.Interact), 1000000);
  WaitUntil(EventPlayer().IsButtonHeld(Button.Interact), 1000000);
  SetSlowMotion(100);
}
